function [] = sysgensim_gui()

% SysGenSIM Graphical User Interface

% Copyright Â© 2011-2015 CRS4 Srl. http://www.crs4.it/
% Created by:
% Andrea Pinna <andrea.pinna@crs4.it>
% Nicola Soranzo <soranzo@crs4.it>
%
% This file is part of SysGenSIM.
% For more information, visit http://sysgensim.sourceforge.net/ .
%
% This program is free software; you can redistribute it and/or modify it
% under the terms of the GNU General Public License as published by the
% Free Software Foundation; either version 2 of the License, or (at your
% option) any later version.
%
% This program is distributed in the hope that it will be useful, but
% WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
% Public License for more details.
%
% You should have received a copy of the GNU General Public License along
% with this program. If not, see <http://www.gnu.org/licenses/>.


% Set seed for random number generation
R = RandStream('mt19937ar','seed',sum(100*clock));

% Use setDefaultStream if using a pre-2011 version of MATLAB
if verLessThan('matlab', '7.12')
    RandStream.setDefaultStream(R);
else
% Use setGlobalStream if using a post-2010 version of MATLAB
    RandStream.setGlobalStream(R);
end

% Get screen size
scrsz = get(0,'ScreenSize');

% Desired sizes of the main panel
panel_height = 450;
panel_width = 625;

% Outlying panel
if panel_height > round(0.8*scrsz(4))
    fig_height = round(0.8*scrsz(4));
else
    fig_height = panel_height;
end
fig_ll1 = (scrsz(3) - panel_width) / 2;
fig_ll2 = (scrsz(4) - fig_height) / 2 - 30;

% Create external figure
S.fig = figure('Units','Pixels','Position',[fig_ll1 fig_ll2 panel_width fig_height],...
    'Name','SysGenSIM v1.2','NumberTitle','Off');
COL = get(S.fig,'Color');

% Panel to include SysGenSIM panel
S.main_panel_position = [0 0 panel_width fig_height];
S.main_panel = uipanel('Units','Pix','Position',S.main_panel_position,...
    'BackgroundColor',COL);

% Positions
panel_position = [10 10 panel_width-20 fig_height-80]; % Width = 680


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Panels
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

S.welcome_panel = uipanel('Parent',S.main_panel,...
    'Title',' SysGenSIM v1.2 ',...
    'Units', 'Pixels', ...
    'BackgroundColor','White',...
    'Position',panel_position,...
    'Visible','On');
S.network_panel = uipanel('Parent',S.main_panel,...
    'Title',' Gene Network ',...
    'Units', 'Pixels', ...
    'BackgroundColor','White',...
    'Position',panel_position,...
    'Visible','Off');
S.perturbation_panel = uipanel('Parent',S.main_panel,...
    'Title',' Experimental Perturbations ',...
    'Units', 'Pixels', ...
    'BackgroundColor','White',...
    'Position',panel_position,...
    'Visible','Off');
S.genotype_panel = uipanel('Parent',S.main_panel,...
    'Title',' Genotype Parameters ',...
    'Units', 'Pixels', ...
    'BackgroundColor','White',...
    'Position',panel_position,...
    'Visible','Off');
S.model_panel = uipanel('Parent',S.main_panel,...
    'Title',' Kinetic and Noise Parameters ',...
    'Units', 'Pixels', ...
    'BackgroundColor','White',...
    'Position',panel_position,...
    'Visible','Off');
S.output_panel = uipanel('Parent',S.main_panel,...
    'Title',' Output Files and Figures ',...
    'Units', 'Pixels', ...
    'BackgroundColor','White',...
    'Position',panel_position,...
    'Visible','Off');
S.experiment_panel = uipanel('Parent',S.main_panel,...
    'Title',' Experiment Settings ',...
    'Units', 'Pixels', ...
    'BackgroundColor','White',...
    'Position',panel_position,...
    'Visible','Off');


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% "Go to" buttons
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

S.to_welcome_panel = uicontrol('Parent',S.main_panel,...
    'Style', 'PushButton', ...
    'String', 'SysGenSIM', ...
    'Position', [10 fig_height-35 160 20], ...
    'BackgroundColor',COL,...
    'Callback', {@go_to_welcome_panel,S});

S.to_network_panel = uicontrol('Parent',S.main_panel,...
    'Style', 'PushButton', ...
    'String', 'Gene network', ...
    'Position', [20 fig_height-60 160 20], ...
    'BackgroundColor',COL,...
    'Callback', {@go_to_network_panel,S});

S.to_genotype_panel = uicontrol('Parent',S.main_panel,...
    'Style', 'PushButton', ...
    'String', 'Genotype parameters', ...
    'Position', [185 fig_height-35 180 20], ...
    'BackgroundColor',COL,...
    'Callback', {@go_to_genotype_panel,S});

S.to_perturbation_panel = uicontrol('Parent',S.main_panel,...
    'Style', 'PushButton', ...
    'String', 'Experimental perturbations', ...
    'Position', [195 fig_height-60 180 20], ...
    'BackgroundColor',COL,...
    'Enable','Off',...
    'Callback', {@go_to_perturbation_panel,S});

S.to_model_panel = uicontrol('Parent',S.main_panel,...
    'Style', 'PushButton', ...
    'String', 'Model parameters', ...
    'Position', [380 fig_height-35 160 20], ...
    'BackgroundColor',COL,...
    'Callback', {@go_to_model_panel,S});

S.to_output_panel = uicontrol('Parent',S.main_panel,...
    'Style', 'PushButton', ...
    'String', 'Output selection', ...
    'Position', [390 fig_height-60 160 20], ...
    'BackgroundColor',COL,...
    'Callback', {@go_to_output_panel,S});


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Welcome to SysGenSIM
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

S.text_sysgensim = uicontrol('Parent',S.welcome_panel,...
    'Style','Text', ...
    'String', 'Welcome to SysGenSIM v1.2!', ...
    'BackgroundColor','White',...
    'Position',[65 290 300 15]);
S.text_select_type = uicontrol('Parent',S.welcome_panel,...
    'Style','Text', ...
    'String', 'Please select the desired simulation type:', ...
    'BackgroundColor','White',...
    'Position',[65 240 300 15]);
S.button_group = uibuttongroup('Parent',S.welcome_panel,...
    'Title','Experiment',...
    'BackgroundColor','White',...
    'Units','Pixels',...
    'Position',[65 100 300 110]);
S.sg_simulation = uicontrol(S.button_group,...
    'Style', 'radiobutton', ...
    'String', ' Systems Genetics', ...
    'BackgroundColor','White',...
    'Value',1,...
    'Position', [10 50 250 30]);
S.gp_simulation = uicontrol(S.button_group,...
    'Style', 'radiobutton', ...
    'String', ' Experimental Perturbations', ...
    'BackgroundColor','White',...
    'Value',0,...
    'Position', [10 10 250 30]);
S.text_repeat = uicontrol('Parent',S.welcome_panel,...
    'Style','Text', ...
    'String', 'Number of replicates of the whole experiment', ...
    'BackgroundColor','White',...
    'Position',[20 25 340 15]);
S.repeat = uicontrol('Parent',S.welcome_panel,...
    'Style', 'Edit', ...
    'String', '1', ...
    'BackgroundColor',COL,...
    'Position', [350 20 60 25]);



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Gene network
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

S.text_network = uicontrol('Parent',S.network_panel,...
    'Style','Text', ...
    'String', 'Network Topology', ...
    'BackgroundColor','White',...
    'Position',[20 310 200 15]);
S.text_n = uicontrol('Parent',S.network_panel,...
    'Style','Text', ...
    'String', 'Network Size', ...
    'BackgroundColor','White',...
    'Position',[230 310 100 15]);
S.text_sign_assignment = uicontrol('Parent',S.network_panel,...
    'Style','Text', ...
    'String', 'Sign Assignment', ...
    'BackgroundColor','White',...
    'Position',[340 310 115 15]);
S.text_sign_probability = uicontrol('Parent',S.network_panel,...
    'Style','Text', ...
    'String', 'Sign Probability', ...
    'BackgroundColor','White',...
    'Position',[450 310 130 15]);
S.network = uicontrol('Parent',S.network_panel,...
    'Style', 'PopupMenu', ...
    'String', {' Random',' Random Acyclic',' Scale-Free',' Small-World',' EIPO',' Random Modular',' EIPO Modular',' Load Gene Network',' Load Gene+Phenotype Network'}, ...
    'Value',7, ...
    'BackgroundColor',COL,...
    'Position', [20 280 200 25]);
S.ng = uicontrol('Parent',S.network_panel,...
    'Style', 'Edit', ...
    'String', '100', ...
    'BackgroundColor',COL,...
    'Enable','On',...
    'Position', [240 280 80 25]);
S.sign_assignment = uicontrol('Parent',S.network_panel,...
    'Style', 'PopupMenu', ...
    'String', {' Node-wise',' Edge-wise'}, ...
    'BackgroundColor',COL,...
    'Position', [340 280 115 25]);
S.positive_sign_probability = uicontrol('Parent',S.network_panel,...
    'Style', 'Edit', ...
    'String', '0.5', ...
    'BackgroundColor',COL,...
    'Position', [475 280 80 25]);
S.text_average_degree = uicontrol('Parent',S.network_panel,...
    'Style','Text', ...
    'String', 'Average Node Degree', ...
    'BackgroundColor','White',...
    'Position',[10 250 140 15]);
S.text_modules = uicontrol('Parent',S.network_panel,...
    'Style','Text', ...
    'String', 'Modules', ...
    'BackgroundColor','White',...
    'Position',[180 250 230 15]);
S.text_rewiring_probability = uicontrol('Parent',S.network_panel,...
    'Style','Text', ...
    'String', 'Rewiring Probability', ...
    'BackgroundColor','White',...
    'Position',[450 250 130 15]);
S.average_degree = uicontrol('Parent',S.network_panel,...
    'Style','Edit',...
    'String', '8', ...
    'BackgroundColor',COL,...
    'Enable','On',...
    'Position', [20 220 120 25]);
S.modules = uicontrol('Parent',S.network_panel,...
    'Style','Edit',...
    'String', '3', ...
    'Position', [180 220 230 25],...
    'BackgroundColor',COL,...
    'Enable', 'On');
S.rewiring_probability = uicontrol('Parent',S.network_panel,...
    'Style','Edit',...
    'String', '0.1', ...
    'Position', [475 220 80 25],...
    'BackgroundColor',COL,...
    'Enable', 'On');
S.text_load_network = uicontrol('Parent',S.network_panel,...
    'Style','Text', ...
    'String', 'Path of Custom Network', ...
    'BackgroundColor','White',...
    'Position',[20 190 380 15]);
S.user_network = uicontrol('Parent',S.network_panel,...
    'Style','Edit',...
    'String', '', ...
    'BackgroundColor',COL,...
    'Enable','Off',...
    'Position', [20 160 380 25]);
S.browse_network = uicontrol('Parent',S.network_panel,...
    'Style', 'PushButton',...
    'String', 'Browse Network', ...
    'Position',[450 155 130 35],...
    'BackgroundColor',COL,...
    'Enable','Off',...
    'Callback', {@browse_network_callback,S});

S.network_line_1 = uipanel('Parent',S.network_panel,...
    'Title','',...
    'Units', 'Pixels', ...
    'Position',[20 140 560 2]);

S.text_np = uicontrol('Parent',S.network_panel,...
    'Style','Text', ...
    'String', 'Phenotype Nodes', ...
    'BackgroundColor','White',...
    'Position',[245 110 110 15]);
S.np = uicontrol('Parent',S.network_panel,...
    'Style', 'Edit', ...
    'String', '5', ...
    'BackgroundColor',COL,...
    'Enable','On',...
    'Position', [270 80 60 25]);
S.text_ph_in = uicontrol('Parent',S.network_panel,...
    'Style','Text', ...
    'String', 'Direct Causal Genes', ...
    'BackgroundColor','White',...
    'Position',[20 50 215 15]);
S.text_ph_in_mean = uicontrol('Parent',S.network_panel,...
    'Style','Text', ...
    'String', 'Mean', ...
    'BackgroundColor','White',...
    'Position',[20 25 40 15]);
S.text_ph_in_std = uicontrol('Parent',S.network_panel,...
    'Style','Text', ...
    'String', 'StDev', ...
    'BackgroundColor','White',...
    'Position',[130 25 40 15]);
S.ph_in_mean = uicontrol('Parent',S.network_panel,...
    'Style', 'Edit', ...
    'String', '10', ...
    'BackgroundColor',COL,...
    'Enable','On',...
    'Position', [65 20 60 25]);
S.ph_in_std = uicontrol('Parent',S.network_panel,...
    'Style', 'Edit', ...
    'String', '2', ...
    'BackgroundColor',COL,...
    'Enable','On',...
    'Position', [175 20 60 25]);
S.text_ph_out = uicontrol('Parent',S.network_panel,...
    'Style','Text', ...
    'String', 'Direct Reactive Genes', ...
    'BackgroundColor','White',...
    'Position',[365 50 215 15]);
S.text_ph_out_mean = uicontrol('Parent',S.network_panel,...
    'Style','Text', ...
    'String', 'Mean', ...
    'BackgroundColor','White',...
    'Position',[365 25 40 15]);
S.text_ph_out_std = uicontrol('Parent',S.network_panel,...
    'Style','Text', ...
    'String', 'StDev', ...
    'BackgroundColor','White',...
    'Position',[475 25 40 15]);
S.ph_out_mean = uicontrol('Parent',S.network_panel,...
    'Style', 'Edit', ...
    'String', '10', ...
    'BackgroundColor',COL,...
    'Enable','On',...
    'Position', [410 20 60 25]);
S.ph_out_std = uicontrol('Parent',S.network_panel,...
    'Style', 'Edit', ...
    'String', '2', ...
    'BackgroundColor',COL,...
    'Enable','On',...
    'Position', [520 20 60 25]);



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Experimental perturbations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

S.text_perturbation_modality = uicontrol('Parent',S.perturbation_panel,...
    'Style','Text', ...
    'String', 'Select Perturbation Type', ...
    'BackgroundColor','White',...
    'Position',[20 295 160 15]);
S.perturbation_type = uicontrol('Parent',S.perturbation_panel,...
    'Style', 'PopupMenu', ...
    'String', {' Knock-out',' Knock-down',' Over-expression',' Mixed perturbations'}, ...
    'Value',1, ...
    'BackgroundColor',COL,...
    'Position', [200 290 160 25]);

S.perturbation_line_1 = uipanel('Parent',S.perturbation_panel,...
    'Title','',...
    'Units', 'Pixels', ...
    'Position',[20 275 560 2]);

S.text_knockout = uicontrol('Parent',S.perturbation_panel,...
    'Style','Text', ...
    'String', 'Knock-out', ...
    'BackgroundColor','White',...
    'Position',[20 240 100 15]);
S.text_knockout_modality = uicontrol('Parent',S.perturbation_panel,...
    'Style','Text', ...
    'String', 'Gene Selection', ...
    'BackgroundColor','White',...
    'Position',[140 240 110 15]);
S.knockout_perturbation_modality = uicontrol('Parent',S.perturbation_panel,...
    'Style', 'PopupMenu', ...
    'String', {' All genes',' Only TFs',' Percentage',' Indexes'}, ...
    'Value',1, ...
    'BackgroundColor',COL,...
    'Enable','On',...
    'Position', [250 235 110 25]);

S.text_ko_pct = uicontrol('Parent',S.perturbation_panel,...
    'Style','Text', ...
    'String', 'KO %', ...
    'BackgroundColor','White',...
    'Position',[20 205 40 15]);
S.ko_pct = uicontrol('Parent',S.perturbation_panel,...
    'Style','Edit',...
    'String', '', ...
    'Position', [70 200 50 25],...
    'BackgroundColor',COL,...
    'Enable', 'Off');
S.text_ko_idx = uicontrol('Parent',S.perturbation_panel,...
    'Style','Text', ...
    'String', 'Indexes', ...
    'BackgroundColor','White',...
    'Position',[210 205 50 15]);
S.ko_idx = uicontrol('Parent',S.perturbation_panel,...
    'Style','Edit',...
    'String', '', ...
    'Position', [280 200 300 25],...
    'BackgroundColor',COL,...
    'Enable', 'Off');

S.perturbation_line_2 = uipanel('Parent',S.perturbation_panel,...
    'Title','',...
    'Units', 'Pixels', ...
    'Position',[20 185 560 2]);

S.text_knockdown = uicontrol('Parent',S.perturbation_panel,...
    'Style','Text', ...
    'String', 'Knock-down', ...
    'BackgroundColor','White',...
    'Position',[20 150 100 15]);
S.text_knockdown_modality = uicontrol('Parent',S.perturbation_panel,...
    'Style','Text', ...
    'String', 'Gene Selection', ...
    'BackgroundColor','White',...
    'Position',[140 150 110 15]);
S.knockdown_perturbation_modality = uicontrol('Parent',S.perturbation_panel,...
    'Style', 'PopupMenu', ...
    'String', {' All genes',' Only TFs',' Percentage',' Indexes'}, ...
    'Value',1, ...
    'BackgroundColor',COL,...
    'Enable','Off',...
    'Position', [250 145 110 25]);
S.text_kd_range = uicontrol('Parent',S.perturbation_panel,...
    'Style','Text', ...
    'String', 'Intensity Range', ...
    'BackgroundColor','White',...
    'Position',[380 150 100 15]);
S.kd_lower_range = uicontrol('Parent',S.perturbation_panel,...
    'Style','Edit',...
    'String', '', ...
    'Position', [490 145 40 25],...
    'BackgroundColor',COL,...
    'Enable', 'Off');
S.kd_upper_range = uicontrol('Parent',S.perturbation_panel,...
    'Style','Edit',...
    'String', '', ...
    'Position', [540 145 40 25],...
    'BackgroundColor',COL,...
    'Enable', 'Off');

S.text_kd_pct = uicontrol('Parent',S.perturbation_panel,...
    'Style','Text', ...
    'String', 'KD %', ...
    'BackgroundColor','White',...
    'Position',[20 115 40 15]);
S.kd_pct = uicontrol('Parent',S.perturbation_panel,...
    'Style','Edit',...
    'String', '', ...
    'Position', [70 110 50 25],...
    'BackgroundColor',COL,...
    'Enable', 'Off');
S.text_kd_idx = uicontrol('Parent',S.perturbation_panel,...
    'Style','Text', ...
    'String', 'Indexes', ...
    'BackgroundColor','White',...
    'Position',[210 115 50 15]);
S.kd_idx = uicontrol('Parent',S.perturbation_panel,...
    'Style','Edit',...
    'String', '', ...
    'Position', [280 110 300 25],...
    'BackgroundColor',COL,...
    'Enable', 'Off');


S.perturbation_line_3 = uipanel('Parent',S.perturbation_panel,...
    'Title','',...
    'Units', 'Pixels', ...
    'Position',[20 95 560 2]);

S.text_overexpression = uicontrol('Parent',S.perturbation_panel,...
    'Style','Text', ...
    'String', 'Over-expression', ...
    'BackgroundColor','White',...
    'Position',[20 60 110 15]);
S.text_overexpression_modality = uicontrol('Parent',S.perturbation_panel,...
    'Style','Text', ...
    'String', 'Gene Selection', ...
    'BackgroundColor','White',...
    'Position',[140 60 110 15]);
S.overexpression_perturbation_modality = uicontrol('Parent',S.perturbation_panel,...
    'Style', 'PopupMenu', ...
    'String', {' All genes',' Only TFs',' Percentage',' Indexes'}, ...
    'Value',1, ...
    'BackgroundColor',COL,...
    'Enable','Off',...
    'Position', [250 55 110 25]);
S.text_oe_range = uicontrol('Parent',S.perturbation_panel,...
    'Style','Text', ...
    'String', 'Intensity Range', ...
    'BackgroundColor','White',...
    'Position',[380 60 100 15]);
S.oe_lower_range = uicontrol('Parent',S.perturbation_panel,...
    'Style','Edit',...
    'String', '', ...
    'Position', [490 55 40 25],...
    'BackgroundColor',COL,...
    'Enable', 'Off');
S.oe_upper_range = uicontrol('Parent',S.perturbation_panel,...
    'Style','Edit',...
    'String', '', ...
    'Position', [540 55 40 25],...
    'BackgroundColor',COL,...
    'Enable', 'Off');



S.text_oe_pct = uicontrol('Parent',S.perturbation_panel,...
    'Style','Text', ...
    'String', 'OE %', ...
    'BackgroundColor','White',...
    'Position',[20 25 40 15]);
S.oe_pct = uicontrol('Parent',S.perturbation_panel,...
    'Style','Edit',...
    'String', '', ...
    'Position', [70 20 50 25],...
    'BackgroundColor',COL,...
    'Enable', 'Off');
S.text_oe_idx = uicontrol('Parent',S.perturbation_panel,...
    'Style','Text', ...
    'String', 'Indexes', ...
    'BackgroundColor','White',...
    'Position',[210 25 50 15]);
S.oe_idx = uicontrol('Parent',S.perturbation_panel,...
    'Style','Edit',...
    'String', '', ...
    'Position', [280 20 300 25],...
    'BackgroundColor',COL,...
    'Enable', 'Off');



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Genotype parameters
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

S.text_genotype = uicontrol('Parent',S.genotype_panel,...
    'Style','Text', ...
    'String', 'Marker Positions', ...
    'BackgroundColor','White',...
    'Position',[20 310 110 15]);
S.text_gene_positions = uicontrol('Parent',S.genotype_panel,...
    'Style','Text', ...
    'String', 'Gene Positions', ...
    'BackgroundColor','White',...
    'Position',[170 310 110 15]);
S.text_mapping = uicontrol('Parent',S.genotype_panel,...
    'Style','Text', ...
    'String', 'Mapping Function', ...
    'BackgroundColor','White',...
    'Position',[310 310 130 15]);
S.text_RILs = uicontrol('Parent',S.genotype_panel,...
    'Style','Text', ...
    'String', 'RIL Type', ...
    'BackgroundColor','White',...
    'Position',[470 310 110 15]);
S.genotype = uicontrol('Parent',S.genotype_panel,...
    'Style', 'PopupMenu', ...
    'String', {' Generate',' Load M-Map',' Load M/G-Map'}, ...
    'Value',1, ...
    'BackgroundColor',COL,...
    'Position', [20 280 110 25]);
S.gene_positions = uicontrol('Parent',S.genotype_panel,...
    'Style', 'PopupMenu', ...
    'String', {' at Markers',' Uniformly Distrib.'}, ...
    'Value',1, ...
    'BackgroundColor',COL,...
    'Position', [170 280 110 25]);
S.mapping = uicontrol('Parent',S.genotype_panel,...
    'Style', 'PopupMenu', ...
    'String', {' Haldane',' Kosambi'}, ...
    'Value',1, ...
    'BackgroundColor',COL,...
    'Position', [320 280 110 25]);
S.RILs_type = uicontrol('Parent',S.genotype_panel,...
    'Style', 'PopupMenu', ...
    'String', {' Selfing',' Sibling Mating'}, ...
    'Value',1, ...
    'BackgroundColor',COL,...
    'Position', [470 280 110 25]);
S.text_chromosome = uicontrol('Parent',S.genotype_panel,...
    'Style','Text', ...
    'String', 'Chromosomes', ...
    'BackgroundColor','White',...
    'Position',[10 250 100 15]);
S.chromosomes = uicontrol('Parent',S.genotype_panel,...
    'Style','Edit',...
    'String','5',...
    'BackgroundColor',COL,...
    'Position', [20 220 80 25]);
S.text_gpc = uicontrol('Parent',S.genotype_panel,...
    'Style','Text', ...
    'String', 'Markers per Chromosome', ...
    'BackgroundColor','White',...
    'Position',[130 250 210 15]);
S.text_gpc_mean = uicontrol('Parent',S.genotype_panel,...
    'Style','Text', ...
    'String', 'Mean', ...
    'BackgroundColor','White',...
    'Position',[130 225 40 15]);
S.text_gpc_std = uicontrol('Parent',S.genotype_panel,...
    'Style','Text', ...
    'String', 'StDev', ...
    'BackgroundColor','White',...
    'Position',[240 225 40 15]);
S.markers_per_chromosome_mean = uicontrol('Parent',S.genotype_panel,...
    'Style','Edit',...
    'String', '20', ...
    'Enable','Off',...
    'BackgroundColor',COL,...
    'Position', [175 220 55 25]);
S.markers_per_chromosome_std = uicontrol('Parent',S.genotype_panel,...
    'Style','Edit',...
    'String', '2', ...
    'BackgroundColor',COL,...
    'Position', [285 220 55 25]);
S.text_distance = uicontrol('Parent',S.genotype_panel,...
    'Style','Text', ...
    'String', 'Distances (cM)', ...
    'BackgroundColor','White',...
    'Position',[370 250 210 15]);
S.text_distance_mean = uicontrol('Parent',S.genotype_panel,...
    'Style','Text', ...
    'String', 'Mean', ...
    'BackgroundColor','White',...
    'Position',[370 225 40 15]);
S.text_distance_std = uicontrol('Parent',S.genotype_panel,...
    'Style','Text', ...
    'String', 'StDev', ...
    'BackgroundColor','White',...
    'Position',[480 225 40 15]);
S.distance_mean = uicontrol('Parent',S.genotype_panel,...
    'Style','Edit',...
    'String', '5', ...
    'BackgroundColor',COL,...
    'Position', [415 220 55 25]);
S.distance_std = uicontrol('Parent',S.genotype_panel,...
    'Style','Edit',...
    'String', '1', ...
    'BackgroundColor',COL,...
    'Position', [525 220 55 25]);
S.text_cep = uicontrol('Parent',S.genotype_panel,...
    'Style','Text', ...
    'String', 'Cis-Effect %', ...
    'BackgroundColor','White',...
    'Position',[20 190 80 15]);
S.text_ger = uicontrol('Parent',S.genotype_panel,...
    'Style','Text', ...
    'String', 'Genotyping Error %', ...
    'BackgroundColor','White',...
    'Position',[150 190 120 15]);
S.text_Zl = uicontrol('Parent',S.genotype_panel,...
    'Style','Text', ...
    'String', 'Z Lower Bound', ...
    'BackgroundColor','White',...
    'Position',[360 190 100 15]);
S.text_Zu = uicontrol('Parent',S.genotype_panel,...
    'Style','Text', ...
    'String', 'Z Upper Bound', ...
    'BackgroundColor','White',...
    'Position',[490 190 100 15]);
S.cis_effect_probability = uicontrol('Parent',S.genotype_panel,...
    'Style','Edit',...
    'String', '25', ...
    'BackgroundColor',COL,...
    'Position', [20 160 80 25]);
S.genotype_error_rate = uicontrol('Parent',S.genotype_panel,...
    'Style','Edit',...
    'String', '5', ...
    'BackgroundColor',COL,...
    'Position', [170 160 80 25]);
S.Zl = uicontrol('Parent',S.genotype_panel,...
    'Style','Edit',...
    'String', '0.5', ...
    'BackgroundColor',COL,...
    'Position', [370 160 80 25]);
S.Zu = uicontrol('Parent',S.genotype_panel,...
    'Style','Edit',...
    'String', '0.8', ...
    'BackgroundColor',COL,...
    'Position', [500 160 80 25]);
S.text_load_genotype = uicontrol('Parent',S.genotype_panel,...
    'Style','Text', ...
    'String', 'Path of Custom Genetic Map', ...
    'BackgroundColor','White',...
    'Position',[20 130 380 15]);
S.genetic_map = uicontrol('Parent',S.genotype_panel,...
    'Style','Edit',...
    'String', '', ...
    'BackgroundColor',COL,...
    'Enable','Off',...
    'Position', [20 100 380 25]);
S.browse_genotype = uicontrol('Parent',S.genotype_panel,...
    'Style', 'PushButton',...
    'String', 'Browse Genetic Map', ...
    'Position',[450 95 130 35],...
    'BackgroundColor',COL,...
    'Enable','Off',...
    'Callback', {@browse_genetic_map_callback,S});

S.genotype_line = uipanel('Parent',S.genotype_panel,...
    'Title','',...
    'Units', 'Pixels', ...
    'Position',[20 80 560 2]);

S.text_m_sg = uicontrol('Parent',S.genotype_panel,...
    'Style','Text', ...
    'String', 'Population size', ...
    'BackgroundColor','White',...
    'Position',[20 50 100 15]);
S.m_sg = uicontrol('Parent',S.genotype_panel,...
    'Style', 'Edit', ...
    'String', '10', ...
    'BackgroundColor',COL,...
    'Position', [40 20 60 25]);


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Model parameters
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

S.text_parameter = uicontrol('Parent',S.model_panel,...
    'Style','Text', ...
    'String', 'Name of Parameter', ...
    'HorizontalAlignment','Left', ...
    'BackgroundColor','White',...
    'Position',[20 320 220 15]);
S.text_distribution = uicontrol('Parent',S.model_panel,...
    'Style','Text', ...
    'String', 'Distribution', ...
    'HorizontalAlignment','Left', ...
    'BackgroundColor','White',...
    'Position',[270 320 85 15]);
S.text_par1 = uicontrol('Parent',S.model_panel,...
    'Style','Text', ...
    'String', 'Parameter #1', ...
    'BackgroundColor','White',...
    'Position',[385 320 85 15]);
S.text_par2 = uicontrol('Parent',S.model_panel,...
    'Style','Text', ...
    'String', 'Parameter #2', ...
    'BackgroundColor','White',...
    'Position',[495 320 85 15]);

S.model_line_1 = uipanel('Parent',S.model_panel,...
    'Title','',...
    'Units', 'Pixels', ...
    'Position',[20 305 560 2]);

S.text_V = uicontrol('Parent',S.model_panel,...
    'Style','Text', ...
    'String', 'Basal Transcription Rate', ...
    'HorizontalAlignment','Left', ...
    'BackgroundColor','White',...
    'Position',[20 275 220 15]);
S.V_distribution = uicontrol('Parent',S.model_panel,...
    'Style','PopupMenu',...
    'String', {' Constant',' Uniform',' Gaussian',' Gamma'}, ...
    'Value',1, ...
    'BackgroundColor',COL,...
    'Position', [260 270 100 25]);
S.V_par1 = uicontrol('Parent',S.model_panel,...
    'Style','Edit',...
    'String', '1', ...
    'BackgroundColor',COL,...
    'Position', [390 270 80 25]);
S.V_par2 = uicontrol('Parent',S.model_panel,...
    'Style','Edit',...
    'String', '', ...
    'BackgroundColor',COL,...
    'Enable','Off',...
    'Position', [500 270 80 25]);
S.text_K = uicontrol('Parent',S.model_panel,...
    'Style','Text', ...
    'String', 'Interaction Strength', ...
    'HorizontalAlignment','Left', ...
    'BackgroundColor','White',...
    'Position',[20 235 220 15]);
S.K_distribution = uicontrol('Parent',S.model_panel,...
    'Style','PopupMenu',...
    'String', {' Constant',' Uniform',' Gaussian',' Gamma'}, ...
    'Value',1, ...
    'BackgroundColor',COL,...
    'Position', [260 230 100 25]);
S.K_par1 = uicontrol('Parent',S.model_panel,...
    'Style','Edit',...
    'String', '1', ...
    'BackgroundColor',COL,...
    'Position', [390 230 80 25]);
S.K_par2 = uicontrol('Parent',S.model_panel,...
    'Style','Edit',...
    'String', '', ...
    'BackgroundColor',COL,...
    'Enable','Off',...
    'Position', [500 230 80 25]);
S.text_h = uicontrol('Parent',S.model_panel,...
    'Style','Text', ...
    'String', 'Cooperativity Coefficient', ...
    'HorizontalAlignment','Left', ...
    'BackgroundColor','White',...
    'Position',[20 195 220 15]);
S.h_distribution = uicontrol('Parent',S.model_panel,...
    'Style','PopupMenu',...
    'String', {' Constant',' Uniform',' Gaussian',' Gamma'}, ...
    'Value',4, ...
    'BackgroundColor',COL,...
    'Position', [260 190 100 25]);
S.h_par1 = uicontrol('Parent',S.model_panel,...
    'Style','Edit',...
    'String', '1', ...
    'BackgroundColor',COL,...
    'Position', [390 190 80 25]);
S.h_par2 = uicontrol('Parent',S.model_panel,...
    'Style','Edit',...
    'String', '1.67', ...
    'BackgroundColor',COL,...
    'Position', [500 190 80 25]);
S.text_lambda = uicontrol('Parent',S.model_panel,...
    'Style','Text', ...
    'String', 'Basal Degradation Rate', ...
    'HorizontalAlignment','Left', ...
    'BackgroundColor','White',...
    'Position',[20 155 220 15]);
S.lambda_distribution = uicontrol('Parent',S.model_panel,...
    'Style','PopupMenu',...
    'String', {' Constant',' Uniform',' Gaussian',' Gamma'}, ...
    'Value',1, ...
    'BackgroundColor',COL,...
    'Position', [260 150 100 25]);
S.lambda_par1 = uicontrol('Parent',S.model_panel,...
    'Style','Edit',...
    'String', '1', ...
    'BackgroundColor',COL,...
    'Position', [390 150 80 25]);
S.lambda_par2 = uicontrol('Parent',S.model_panel,...
    'Style','Edit',...
    'String', '', ...
    'BackgroundColor',COL,...
    'Enable','Off',...
    'Position', [500 150 80 25]);

S.model_line_2 = uipanel('Parent',S.model_panel,...
    'Title','',...
    'Units', 'Pixels', ...
    'Position',[20 135 560 2]);

S.text_sbv = uicontrol('Parent',S.model_panel,...
    'Style','Text', ...
    'String', 'Transcription Biological Variance', ...
    'HorizontalAlignment','Left', ...
    'BackgroundColor','White',...
    'Position',[20 105 220 15]);
S.synthesis_bv_distribution = uicontrol('Parent',S.model_panel,...
    'Style','PopupMenu',...
    'String', {' Constant',' Uniform',' Gaussian',' Gamma'}, ...
    'Value',3, ...
    'BackgroundColor',COL,...
    'Position', [260 100 100 25]);
S.sbv_par1 = uicontrol('Parent',S.model_panel,...
    'Style','Edit',...
    'String', '1', ...
    'BackgroundColor',COL,...
    'Position', [390 100 80 25]);
S.sbv_par2 = uicontrol('Parent',S.model_panel,...
    'Style','Edit',...
    'String', '0.1', ...
    'BackgroundColor',COL,...
    'Position', [500 100 80 25]);
S.text_dbv = uicontrol('Parent',S.model_panel,...
    'Style','Text', ...
    'String', 'Degradation Biological Variance', ...
    'HorizontalAlignment','Left', ...
    'BackgroundColor','White',...
    'Position',[20 65 220 15]);
S.degradation_bv_distribution = uicontrol('Parent',S.model_panel,...
    'Style','PopupMenu',...
    'String', {' Constant',' Uniform',' Gaussian',' Gamma'}, ...
    'Value',3, ...
    'BackgroundColor',COL,...
    'Position', [260 60 100 25]);
S.dbv_par1 = uicontrol('Parent',S.model_panel,...
    'Style','Edit',...
    'String', '1', ...
    'BackgroundColor',COL,...
    'Position', [390 60 80 25]);
S.dbv_par2 = uicontrol('Parent',S.model_panel,...
    'Style','Edit',...
    'String', '0.1', ...
    'BackgroundColor',COL,...
    'Position', [500 60 80 25]);
S.text_mn = uicontrol('Parent',S.model_panel,...
    'Style','Text', ...
    'String', 'Expression Measurement Noise', ...
    'HorizontalAlignment','Left', ...
    'BackgroundColor','White',...
    'Position',[20 25 220 15]);
S.measurement_noise_distribution = uicontrol('Parent',S.model_panel,...
    'Style','PopupMenu',...
    'String', {' Constant',' Uniform',' Gaussian',' Gamma'}, ...
    'Value',3, ...
    'BackgroundColor',COL,...
    'Position', [260 20 100 25]);
S.mn_par1 = uicontrol('Parent',S.model_panel,...
    'Style','Edit',...
    'String', '1', ...
    'BackgroundColor',COL,...
    'Position', [390 20 80 25]);
S.mn_par2 = uicontrol('Parent',S.model_panel,...
    'Style','Edit',...
    'String', '0.1', ...
    'BackgroundColor',COL,...
    'Position', [500 20 80 25]);


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Phenotype parameters
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Output files and figures
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

S.genotype_matrix = uicontrol('Parent',S.output_panel,...
    'Style','CheckBox',...
    'String', '  Genotype Matrix', ...
    'BackgroundColor','White',...
    'Value',1,...
    'Position', [20 290 200 20]);
S.gene_expression_matrix = uicontrol('Parent',S.output_panel,...
    'Style','CheckBox',...
    'String', '  Gene Expression Matrix', ...
    'BackgroundColor','White',...
    'Value',1,...
    'Position', [20 260 200 20]);
S.phenotype_matrix = uicontrol('Parent',S.output_panel,...
    'Style','CheckBox',...
    'String', '  Phenotype Matrix', ...
    'BackgroundColor','White',...
    'Value',1,...
    'Position', [20 230 200 20]);
S.print_genetic_map = uicontrol('Parent',S.output_panel,...
    'Style','CheckBox',...
    'String', '  Genetic Map', ...
    'BackgroundColor','White',...
    'Value',1,...
    'Position', [20 200 200 20]);
S.edge_list = uicontrol('Parent',S.output_panel,...
    'Style','CheckBox',...
    'String', '  Edge List', ...
    'BackgroundColor','White',...
    'Value',1,...
    'Position', [20 170 200 20]);
S.pajek_network_file = uicontrol('Parent',S.output_panel,...
    'Style','CheckBox',...
    'String', '  Pajek Network File', ...
    'BackgroundColor','White',...
    'Position', [20 140 200 20]);
S.module_list = uicontrol('Parent',S.output_panel,...
    'Style','CheckBox',...
    'String', '  Module List', ...
    'BackgroundColor','White',...
    'Position', [20 110 200 20]);
S.topological_properties = uicontrol('Parent',S.output_panel,...
    'Style','CheckBox',...
    'String', '  Topological Properties', ...
    'BackgroundColor','White',...
    'Position', [20 80 200 20]);
S.genotype_information = uicontrol('Parent',S.output_panel,...
    'Style','CheckBox',...
    'String', '  Genotype Information', ...
    'BackgroundColor','White',...
    'Position', [20 50 200 20]);
S.perturbation_list = uicontrol('Parent',S.output_panel,...
    'Style','CheckBox',...
    'String', '  Perturbation List', ...
    'BackgroundColor','White',...
    'Value',0,...
    'Enable','Off',...
    'Position', [20 20 200 20]);
S.simulation_summary = uicontrol('Parent',S.output_panel,...
    'Style','CheckBox',...
    'String', '  Simulation Summary', ...
    'BackgroundColor','White',...
    'Value',1,...
    'Position', [320 20 200 20]);

% Output figures
S.node_degree_distributions = uicontrol('Parent',S.output_panel,...
    'Style','CheckBox',...
    'String', '  Node Degree Distributions', ...
    'BackgroundColor','White',...
    'Position', [320 290 220 20]);
S.parameter_distributions = uicontrol('Parent',S.output_panel,...
    'Style','CheckBox',...
    'String', '  Parameter Distributions', ...
    'BackgroundColor','White',...
    'Position', [320 260 220 20]);
S.gene_expression_distribution = uicontrol('Parent',S.output_panel,...
    'Style','CheckBox',...
    'String', '  Gene Expression Distribution', ...
    'BackgroundColor','White',...
    'Position', [320 230 220 20]);
S.heritability_distribution = uicontrol('Parent',S.output_panel,...
    'Style','CheckBox',...
    'String', '  Heritability Distribution', ...
    'BackgroundColor','White',...
    'Position', [320 200 220 20]);
S.correlation_distributions = uicontrol('Parent',S.output_panel,...
    'Style','CheckBox',...
    'String', '  Gene Correlation Distributions', ...
    'BackgroundColor','White',...
    'Position', [320 170 220 20]);


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Experiment settings
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

S.run_sysgensim = uicontrol('Parent',S.main_panel,...
    'Style', 'PushButton', ...
    'String', 'Run!', ...
    'Position', [565 fig_height-60 45 45], ...
    'BackgroundColor',COL,...
    'Callback', {@run_callback,S});


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Callbacks
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
set(S.sg_simulation,'Callback',{@simulation_callback,S});
set(S.gp_simulation,'Callback',{@simulation_callback,S});
set(S.network,'Callback',{@network_callback,S});
set(S.ng,'Callback',{@gene_positions_callback,S});
set(S.perturbation_type,'Callback',{@perturbation_type_callback,S});
set(S.knockout_perturbation_modality,'Callback',{@knockout_modality_callback,S});
set(S.knockdown_perturbation_modality,'Callback',{@knockdown_modality_callback,S});
set(S.overexpression_perturbation_modality,'Callback',{@overexpression_modality_callback,S});
set(S.genotype,'Callback',{@genotype_callback,S});
set(S.gene_positions,'Callback',{@gene_positions_callback,S});
set(S.chromosomes,'Callback',{@gene_positions_callback,S});
set(S.V_distribution,'Callback',{@V_callback,S});
set(S.K_distribution,'Callback',{@K_callback,S});
set(S.h_distribution,'Callback',{@h_callback,S});
set(S.lambda_distribution,'Callback',{@lambda_callback,S});
set(S.synthesis_bv_distribution,'Callback',{@synthesis_bv_callback,S});
set(S.degradation_bv_distribution,'Callback',{@degradation_bv_callback,S});
set(S.measurement_noise_distribution,'Callback',{@measurement_noise_callback,S});


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Functions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    function browse_network_callback(varargin)
        S = varargin{3};
        % Open the menu
        [filename, pathname] = uigetfile({'*.*','All files (*.*)'; ...
            '*.tsv','Tab separated value files (*.tsv)'; ...
            '*.txt','Text files (*.txt)'});
        % Select the network file
        if any(filename ~= 0) && any(pathname ~= 0)
            set(S.user_network,'String',strcat(pathname,filename));
        end
    end

    function browse_genetic_map_callback(varargin)
        S = varargin{3};
        % Open the menu
        [filename, pathname] = uigetfile({'*.*','All files (*.*)'; ...
            '*.tsv','Tab separated value files (*.tsv)'; ...
            '*.txt','Text files (*.txt)'});
        % Select the genetic map file
        if any(filename ~= 0) && any(pathname ~= 0)
            set(S.genetic_map,'String',strcat(pathname,filename));
        end
    end

    function simulation_callback(varargin)
        S = varargin{3};
        if get(S.sg_simulation,'Value') == 1 && get(S.gp_simulation,'Value') == 0
            set(S.to_genotype_panel,'Enable','On');
            set(S.to_perturbation_panel,'Enable','Off');
            set(S.perturbation_list,'Value',0,'Enable','Off');
            set(S.genotype_matrix,'Enable','On');
            set(S.print_genetic_map,'Enable','On');
            set(S.genotype_information,'Enable','On');
        elseif get(S.sg_simulation,'Value') == 0 && get(S.gp_simulation,'Value') == 1
            set(S.to_genotype_panel,'Enable','Off');
            set(S.to_perturbation_panel,'Enable','On');
            set(S.perturbation_list,'Enable','On');
            set(S.genotype_matrix,'Value',0,'Enable','Off');
            set(S.print_genetic_map,'Value',0,'Enable','Off');
            set(S.genotype_information,'Value',0,'Enable','Off');
        else
            set(S.to_genotype_panel,'Enable','Off');
            set(S.to_perturbation_panel,'Enable','Off');
            set(S.perturbation_list,'Value',0,'Enable','Off');
            set(S.genotype_matrix,'Value',0,'Enable','Off');
            set(S.print_genetic_map,'Value',0,'Enable','Off');
            set(S.genotype_information,'Value',0,'Enable','Off');
        end
    end

    function network_callback(varargin)
        S = varargin{3};
        switch get(S.network,'Value')
            case {1,2,3,5} % Uni-modular
                set(S.ng,'Enable','On');
                set(S.average_degree,'Enable','On');
                set(S.modules,'Enable','Off');
                set(S.rewiring_probability,'Enable','Off');
                set(S.user_network,'Enable','Off');
                set(S.browse_network,'Enable','Off');
                set(S.np,'Enable','On');
                set(S.ph_in_mean,'Enable','On');
                set(S.ph_in_std,'Enable','On');
                set(S.ph_out_mean,'Enable','On');
                set(S.ph_out_std,'Enable','On');
            case 4 % Small-world
                set(S.ng,'Enable','On');
                set(S.average_degree,'Enable','On');
                set(S.modules,'Enable','Off');
                set(S.rewiring_probability,'Enable','On');
                set(S.user_network,'Enable','Off');
                set(S.browse_network,'Enable','Off');
                set(S.np,'Enable','On');
                set(S.ph_in_mean,'Enable','On');
                set(S.ph_in_std,'Enable','On');
                set(S.ph_out_mean,'Enable','On');
                set(S.ph_out_std,'Enable','On');
            case {6,7} % Modular
                set(S.ng,'Enable','On');
                set(S.average_degree,'Enable','On');
                set(S.modules,'Enable','On');
                set(S.rewiring_probability,'Enable','On');
                set(S.user_network,'Enable','Off');
                set(S.browse_network,'Enable','Off');
                set(S.np,'Enable','On');
                set(S.ph_in_mean,'Enable','On');
                set(S.ph_in_std,'Enable','On');
                set(S.ph_out_mean,'Enable','On');
                set(S.ph_out_std,'Enable','On');
            case 8 % Load gene network
                set(S.ng,'Enable','Off');
                set(S.average_degree,'Enable','Off');
                set(S.modules,'Enable','Off');
                set(S.rewiring_probability,'Enable','Off');
                set(S.user_network,'Enable','On');
                set(S.browse_network,'Enable','On');
                set(S.np,'Enable','On');
                set(S.ph_in_mean,'Enable','On');
                set(S.ph_in_std,'Enable','On');
                set(S.ph_out_mean,'Enable','On');
                set(S.ph_out_std,'Enable','On');
            otherwise % Load gene + phenotype network
                set(S.ng,'Enable','Off');
                set(S.average_degree,'Enable','Off');
                set(S.modules,'Enable','Off');
                set(S.rewiring_probability,'Enable','Off');
                set(S.user_network,'Enable','On');
                set(S.browse_network,'Enable','On');
                set(S.np,'Enable','Off');
                set(S.ph_in_mean,'Enable','Off');
                set(S.ph_in_std,'Enable','Off');
                set(S.ph_out_mean,'Enable','Off');
                set(S.ph_out_std,'Enable','Off');
        end
    end

    function perturbation_type_callback(varargin)
        S = varargin{3};
        switch get(S.perturbation_type,'Value')
            %             case 1 % No perturbations
            %                 set(S.knockout_perturbation_modality,'Enable','Off');
            %                 set(S.ko_pct,'Enable','Off');
            %                 set(S.ko_idx,'Enable','Off');
            %                 set(S.knockdown_perturbation_modality,'Enable','Off');
            %                 set(S.kd_lower_range,'Enable','Off');
            %                 set(S.kd_upper_range,'Enable','Off');
            %                 set(S.kd_pct,'Enable','Off');
            %                 set(S.kd_idx,'Enable','Off');
            %                 set(S.overexpression_perturbation_modality,'Enable','Off');
            %                 set(S.oe_lower_range,'Enable','Off');
            %                 set(S.oe_upper_range,'Enable','Off');
            %                 set(S.oe_pct,'Enable','Off');
            %                 set(S.oe_idx,'Enable','Off');
            case 1 % Knockout
                set(S.knockout_perturbation_modality,'Enable','On');
                if get(S.knockout_perturbation_modality,'Value') == 3
                    set(S.ko_pct,'Enable','On');
                    set(S.ko_idx,'Enable','Off');
                elseif get(S.knockout_perturbation_modality,'Value') == 4
                    set(S.ko_pct,'Enable','Off');
                    set(S.ko_idx,'Enable','On');
                else
                    set(S.ko_pct,'Enable','Off');
                    set(S.ko_idx,'Enable','Off');
                end
                set(S.knockdown_perturbation_modality,'Enable','Off');
                set(S.kd_lower_range,'Enable','Off');
                set(S.kd_upper_range,'Enable','Off');
                set(S.kd_pct,'Enable','Off');
                set(S.kd_idx,'Enable','Off');
                set(S.overexpression_perturbation_modality,'Enable','Off');
                set(S.oe_lower_range,'Enable','Off');
                set(S.oe_upper_range,'Enable','Off');
                set(S.oe_pct,'Enable','Off');
                set(S.oe_idx,'Enable','Off');
            case 2 % Knockdown
                set(S.knockout_perturbation_modality,'Enable','Off');
                set(S.ko_pct,'Enable','Off');
                set(S.ko_idx,'Enable','Off');
                set(S.knockdown_perturbation_modality,'Enable','On');
                set(S.kd_lower_range,'Enable','On');
                set(S.kd_upper_range,'Enable','On');
                if get(S.knockdown_perturbation_modality,'Value') == 3
                    set(S.kd_pct,'Enable','On');
                    set(S.kd_idx,'Enable','Off');
                elseif get(S.knockdown_perturbation_modality,'Value') == 4
                    set(S.kd_pct,'Enable','Off');
                    set(S.kd_idx,'Enable','On');
                else
                    set(S.kd_pct,'Enable','Off');
                    set(S.kd_idx,'Enable','Off');
                end
                set(S.overexpression_perturbation_modality,'Enable','Off');
                set(S.oe_lower_range,'Enable','Off');
                set(S.oe_upper_range,'Enable','Off');
                set(S.oe_pct,'Enable','Off');
                set(S.oe_idx,'Enable','Off');
            case 3 % Over-expression
                set(S.knockout_perturbation_modality,'Enable','Off');
                set(S.ko_pct,'Enable','Off');
                set(S.ko_idx,'Enable','Off');
                set(S.knockdown_perturbation_modality,'Enable','Off');
                set(S.kd_lower_range,'Enable','Off');
                set(S.kd_upper_range,'Enable','Off');
                set(S.kd_pct,'Enable','Off');
                set(S.kd_idx,'Enable','Off');
                set(S.overexpression_perturbation_modality,'Enable','On');
                set(S.oe_lower_range,'Enable','On');
                set(S.oe_upper_range,'Enable','On');
                if get(S.overexpression_perturbation_modality,'Value') == 3
                    set(S.oe_pct,'Enable','On');
                    set(S.oe_idx,'Enable','Off');
                elseif get(S.overexpression_perturbation_modality,'Value') == 4
                    set(S.oe_pct,'Enable','Off');
                    set(S.oe_idx,'Enable','On');
                else
                    set(S.oe_pct,'Enable','Off');
                    set(S.oe_idx,'Enable','Off');
                end
            case 4 % Mixed perturbations
                set(S.knockout_perturbation_modality,'Enable','On');
                if get(S.knockout_perturbation_modality,'Value') == 3
                    set(S.ko_pct,'Enable','On');
                    set(S.ko_idx,'Enable','Off');
                elseif get(S.knockout_perturbation_modality,'Value') == 4
                    set(S.ko_pct,'Enable','Off');
                    set(S.ko_idx,'Enable','On');
                else
                    set(S.ko_pct,'Enable','Off');
                    set(S.ko_idx,'Enable','Off');
                end
                set(S.knockdown_perturbation_modality,'Enable','On');
                set(S.kd_lower_range,'Enable','On');
                set(S.kd_upper_range,'Enable','On');
                if get(S.knockdown_perturbation_modality,'Value') == 3
                    set(S.kd_pct,'Enable','On');
                    set(S.kd_idx,'Enable','Off');
                elseif get(S.knockdown_perturbation_modality,'Value') == 4
                    set(S.kd_pct,'Enable','Off');
                    set(S.kd_idx,'Enable','On');
                else
                    set(S.kd_pct,'Enable','Off');
                    set(S.kd_idx,'Enable','Off');
                end
                set(S.overexpression_perturbation_modality,'Enable','On');
                set(S.oe_lower_range,'Enable','On');
                set(S.oe_upper_range,'Enable','On');
                if get(S.overexpression_perturbation_modality,'Value') == 3
                    set(S.oe_pct,'Enable','On');
                    set(S.oe_idx,'Enable','Off');
                elseif get(S.overexpression_perturbation_modality,'Value') == 4
                    set(S.oe_pct,'Enable','Off');
                    set(S.oe_idx,'Enable','On');
                else
                    set(S.oe_pct,'Enable','Off');
                    set(S.oe_idx,'Enable','Off');
                end
        end
    end

    function knockout_modality_callback(varargin)
        S = varargin{3};
        if get(S.knockout_perturbation_modality,'Value') == 3
            set(S.ko_pct,'Enable','On');
            set(S.ko_idx,'Enable','Off');
        elseif get(S.knockout_perturbation_modality,'Value') == 4
            set(S.ko_pct,'Enable','Off');
            set(S.ko_idx,'Enable','On');
        else
            set(S.ko_pct,'Enable','Off');
            set(S.ko_idx,'Enable','Off');
        end
    end

    function knockdown_modality_callback(varargin)
        S = varargin{3};
        if get(S.knockdown_perturbation_modality,'Value') == 3
            set(S.kd_pct,'Enable','On');
            set(S.kd_idx,'Enable','Off');
        elseif get(S.knockdown_perturbation_modality,'Value') == 4
            set(S.kd_pct,'Enable','Off');
            set(S.kd_idx,'Enable','On');
        else
            set(S.kd_pct,'Enable','Off');
            set(S.kd_idx,'Enable','Off');
        end
    end

    function overexpression_modality_callback(varargin)
        S = varargin{3};
        if get(S.overexpression_perturbation_modality,'Value') == 3
            set(S.oe_pct,'Enable','On');
            set(S.oe_idx,'Enable','Off');
        elseif get(S.overexpression_perturbation_modality,'Value') == 4
            set(S.oe_pct,'Enable','Off');
            set(S.oe_idx,'Enable','On');
        else
            set(S.oe_pct,'Enable','Off');
            set(S.oe_idx,'Enable','Off');
        end
    end

    function genotype_callback(varargin)
        S = varargin{3};
        switch get(S.genotype,'Value')
            case 1 % Generate
                set(S.gene_positions,'Enable','On');
                set(S.RILs_type,'Enable','On');
                set(S.mapping,'Enable','On');
                set(S.chromosomes,'Enable','On');
                set(S.markers_per_chromosome_mean,'Enable','On');
                set(S.markers_per_chromosome_std,'Enable','On');
                set(S.distance_mean,'Enable','On');
                set(S.distance_std,'Enable','On');
                set(S.cis_effect_probability,'Enable','On');
                set(S.Zl,'Enable','On');
                set(S.Zu,'Enable','On');
                set(S.genetic_map,'Enable','Off');
                set(S.browse_genotype,'Enable','Off');
            case 2 % Load Marker Map
                set(S.gene_positions,'Enable','On');
                set(S.RILs_type,'Enable','On');
                set(S.mapping,'Enable','On');
                set(S.chromosomes,'Enable','Off');
                set(S.markers_per_chromosome_mean,'Enable','Off');
                set(S.markers_per_chromosome_std,'Enable','Off');
                set(S.distance_mean,'Enable','Off');
                set(S.distance_std,'Enable','Off');
                set(S.cis_effect_probability,'Enable','On');
                set(S.Zl,'Enable','On');
                set(S.Zu,'Enable','On');
                set(S.genetic_map,'Enable','On');
                set(S.browse_genotype,'Enable','On');
            case 3 % Load Marker-Gene Map
                set(S.gene_positions,'Enable','Off');
                set(S.RILs_type,'Enable','On');
                set(S.mapping,'Enable','On');
                set(S.chromosomes,'Enable','Off');
                set(S.markers_per_chromosome_mean,'Enable','Off');
                set(S.markers_per_chromosome_std,'Enable','Off');
                set(S.distance_mean,'Enable','Off');
                set(S.distance_std,'Enable','Off');
                set(S.cis_effect_probability,'Enable','On');
                set(S.Zl,'Enable','On');
                set(S.Zu,'Enable','On');
                set(S.genetic_map,'Enable','On');
                set(S.browse_genotype,'Enable','On');
        end
    end

    function gene_positions_callback(varargin)
        S = varargin{3};
        switch get(S.gene_positions,'Value')
            case 1 % at Markers
                set(S.markers_per_chromosome_mean,'Enable','Off',...
                    'String',num2str(round(str2num(get(S.ng,'String'))/str2num(get(S.chromosomes,'String')))));
            otherwise % Uniformly Distributed
                if get(S.genotype,'Value') == 1 % Generate marker map
                    set(S.markers_per_chromosome_mean,'Enable','On');
                else % Load marker map
                    set(S.markers_per_chromosome_mean,'Enable','Off');
                end
        end
    end

    function V_callback(varargin)
        S = varargin{3};
        switch get(S.V_distribution,'Value')
            case 1 % Constant
                set(S.V_par2,'Enable','Off');
            otherwise
                set(S.V_par2,'Enable','On');
        end
    end

    function K_callback(varargin)
        S = varargin{3};
        switch get(S.K_distribution,'Value')
            case 1 % Constant
                set(S.K_par2,'Enable','Off');
            otherwise
                set(S.K_par2,'Enable','On');
        end
    end

    function h_callback(varargin)
        S = varargin{3};
        switch get(S.h_distribution,'Value')
            case 1 % Constant
                set(S.h_par2,'Enable','Off');
            otherwise
                set(S.h_par2,'Enable','On');
        end
    end

    function lambda_callback(varargin)
        S = varargin{3};
        switch get(S.lambda_distribution,'Value')
            case 1 % Constant
                set(S.lambda_par2,'Enable','Off');
            otherwise
                set(S.lambda_par2,'Enable','On');
        end
    end

    function synthesis_bv_callback(varargin)
        S = varargin{3};
        switch get(S.synthesis_bv_distribution,'Value')
            case 1 % Constant
                set(S.sbv_par2,'Enable','Off');
            otherwise
                set(S.sbv_par2,'Enable','On');
        end
    end

    function degradation_bv_callback(varargin)
        S = varargin{3};
        switch get(S.degradation_bv_distribution,'Value')
            case 1 % Constant
                set(S.dbv_par2,'Enable','Off');
            otherwise
                set(S.dbv_par2,'Enable','On');
        end
    end

    function measurement_noise_callback(varargin)
        S = varargin{3};
        switch get(S.measurement_noise_distribution,'Value')
            case 1 % Constant
                set(S.mn_par2,'Enable','Off');
            otherwise
                set(S.mn_par2,'Enable','On');
        end
    end

    function go_to_welcome_panel(varargin)
        S = varargin{3};
        set(S.welcome_panel,'Visible','On');
        set(S.network_panel,'Visible','Off');
        set(S.perturbation_panel,'Visible','Off');
        set(S.genotype_panel,'Visible','Off');
        set(S.model_panel,'Visible','Off');
        set(S.output_panel,'Visible','Off');
    end

    function go_to_network_panel(varargin)
        S = varargin{3};
        set(S.welcome_panel,'Visible','Off');
        set(S.network_panel,'Visible','On');
        set(S.perturbation_panel,'Visible','Off');
        set(S.genotype_panel,'Visible','Off');
        set(S.model_panel,'Visible','Off');
        set(S.output_panel,'Visible','Off');
    end

    function go_to_perturbation_panel(varargin)
        S = varargin{3};
        set(S.welcome_panel,'Visible','Off');
        set(S.network_panel,'Visible','Off');
        set(S.perturbation_panel,'Visible','On');
        set(S.genotype_panel,'Visible','Off');
        set(S.model_panel,'Visible','Off');
        set(S.output_panel,'Visible','Off');
    end

    function go_to_genotype_panel(varargin)
        S = varargin{3};
        set(S.welcome_panel,'Visible','Off');
        set(S.network_panel,'Visible','Off');
        set(S.perturbation_panel,'Visible','Off');
        set(S.genotype_panel,'Visible','On');
        set(S.model_panel,'Visible','Off');
        set(S.output_panel,'Visible','Off');
    end

    function go_to_model_panel(varargin)
        S = varargin{3};
        set(S.welcome_panel,'Visible','Off');
        set(S.network_panel,'Visible','Off');
        set(S.perturbation_panel,'Visible','Off');
        set(S.genotype_panel,'Visible','Off');
        set(S.model_panel,'Visible','On');
        set(S.output_panel,'Visible','Off');
    end

    function go_to_output_panel(varargin)
        S = varargin{3};
        set(S.welcome_panel,'Visible','Off');
        set(S.network_panel,'Visible','Off');
        set(S.perturbation_panel,'Visible','Off');
        set(S.genotype_panel,'Visible','Off');
        set(S.model_panel,'Visible','Off');
        set(S.output_panel,'Visible','On');
    end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Run SysGenSIM
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    function run_callback(varargin)
        S = varargin{3};
        
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        
        % Simulation type
        p.sg_simulation = get(S.sg_simulation,'Value');
        p.gp_simulation = get(S.gp_simulation,'Value');
        if p.sg_simulation == 1 && p.gp_simulation == 0
            p.simulation = 'sg';
        elseif p.sg_simulation == 0 && p.gp_simulation == 1
            p.simulation = 'gp';
        else
            p.simulation = 'undefined';
        end
        % Simulation repeats
        p.repeat = str2double(get(S.repeat,'String'));
        
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        
        % Network type
        p.network = get(S.network,'Value');
        switch p.network
            case 1,        p.network = 'random';
            case 2,        p.network = 'random-acyclic';
            case 3,        p.network = 'scale-free';
            case 4,        p.network = 'small-world';
            case 5,        p.network = 'eipo';
            case 6,        p.network = 'random-modular';
            case 7,        p.network = 'eipo-modular';
            case 8,        p.network = 'load_gn';
            case 9,        p.network = 'load_gpn';
        end
        % Number of genes
        p.ng = str2num(get(S.ng,'String'));
        % Sign assignment
        p.sign_assignment = get(S.sign_assignment,'Value');
        switch p.sign_assignment
            case 1,        p.sign_assignment = 'node-wise';
            case 2,        p.sign_assignment = 'edge-wise';
        end
        % Positive sign probability
        p.positive_sign_probability = str2num(get(S.positive_sign_probability,'String'));
        % Average degree
        p.average_degree = str2num(get(S.average_degree,'String'));
        % Modules
        p.modules = str2num(get(S.modules,'String'));
        % Rewiring probability
        p.rewiring_probability = str2num(get(S.rewiring_probability,'String'));
        % Customized network
        p.user_network = get(S.user_network,'String');
        % Number of macroscopic phenotypes
        p.np = str2num(get(S.np,'String'));
        % Number of input edges to phenotype nodes
        p.ph_in_mean = str2num(get(S.ph_in_mean,'String'));
        p.ph_in_std = str2num(get(S.ph_in_std,'String'));
        % Number of output edges from phenotype nodes
        p.ph_out_mean = str2num(get(S.ph_out_mean,'String'));
        p.ph_out_std = str2num(get(S.ph_out_std,'String'));
        
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        
        % Perturbation type
        p.perturbation_type = get(S.perturbation_type,'Value');
        switch p.perturbation_type
            %case 1,        p.perturbation_type = 'no_perturbations';
            case 1,        p.perturbation_type = 'knockout';
            case 2,        p.perturbation_type = 'knockdown';
            case 3,        p.perturbation_type = 'overexpression';
            case 4,        p.perturbation_type = 'mixed';
        end
        % Knockout
        p.knockout_modality = get(S.knockout_perturbation_modality,'Value');
        switch p.knockout_modality
            case 1,        p.knockout_modality = 'all';
            case 2,        p.knockout_modality = 'TFs';
            case 3,        p.knockout_modality = 'pct';
            case 4,        p.knockout_modality = 'idx';
        end
        p.ko_pct = str2num(get(S.ko_pct,'String'));
        p.ko_idx = str2num(get(S.ko_idx,'String'));
        % Knockdown
        p.knockdown_modality = get(S.knockdown_perturbation_modality,'Value');
        switch p.knockdown_modality
            case 1,        p.knockdown_modality = 'all';
            case 2,        p.knockdown_modality = 'TFs';
            case 3,        p.knockdown_modality = 'pct';
            case 4,        p.knockdown_modality = 'idx';
        end
        p.kd_lower_range = str2num(get(S.kd_lower_range,'String'));
        p.kd_upper_range = str2num(get(S.kd_upper_range,'String'));
        p.kd_pct = str2num(get(S.kd_pct,'String'));
        p.kd_idx = str2num(get(S.kd_idx,'String'));
        % Overexpression
        p.overexpression_modality = get(S.overexpression_perturbation_modality,'Value');
        switch p.overexpression_modality
            case 1,        p.overexpression_modality = 'all';
            case 2,        p.overexpression_modality = 'TFs';
            case 3,        p.overexpression_modality = 'pct';
            case 4,        p.overexpression_modality = 'idx';
        end
        p.oe_lower_range = str2num(get(S.oe_lower_range,'String'));
        p.oe_upper_range = str2num(get(S.oe_upper_range,'String'));
        p.oe_pct = str2num(get(S.oe_pct,'String'));
        p.oe_idx = str2num(get(S.oe_idx,'String'));
        
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        
        % Basal transcription rate
        p.V_distribution = get(S.V_distribution,'Value');
        switch p.V_distribution
            case 1,        p.V_distribution = 'constant';
            case 2,        p.V_distribution = 'uniform';
            case 3,        p.V_distribution = 'gaussian';
            case 4,        p.V_distribution = 'gamma';
        end
        p.V_par1 = str2num(get(S.V_par1,'String'));
        p.V_par2 = str2num(get(S.V_par2,'String'));
        % Interaction strength
        p.K_distribution = get(S.K_distribution,'Value');
        switch p.K_distribution
            case 1,        p.K_distribution = 'constant';
            case 2,        p.K_distribution = 'uniform';
            case 3,        p.K_distribution = 'gaussian';
            case 4,        p.K_distribution = 'gamma';
        end
        p.K_par1 = str2num(get(S.K_par1,'String'));
        p.K_par2 = str2num(get(S.K_par2,'String'));
        % Cooperativity coefficient
        p.h_distribution = get(S.h_distribution,'Value');
        switch p.h_distribution
            case 1,        p.h_distribution = 'constant';
            case 2,        p.h_distribution = 'uniform';
            case 3,        p.h_distribution = 'gaussian';
            case 4,        p.h_distribution = 'gamma';
        end
        p.h_par1 = str2num(get(S.h_par1,'String'));
        p.h_par2 = str2num(get(S.h_par2,'String'));
        % Degradation rate
        p.lambda_distribution = get(S.lambda_distribution,'Value');
        switch p.lambda_distribution
            case 1,        p.lambda_distribution = 'constant';
            case 2,        p.lambda_distribution = 'uniform';
            case 3,        p.lambda_distribution = 'gaussian';
            case 4,        p.lambda_distribution = 'gamma';
        end
        p.lambda_par1 = str2num(get(S.lambda_par1,'String'));
        p.lambda_par2 = str2num(get(S.lambda_par2,'String'));
        % Synthesis biological variance
        p.synthesis_bv_distribution = get(S.synthesis_bv_distribution,'Value');
        switch p.synthesis_bv_distribution
            case 1,        p.synthesis_bv_distribution = 'constant';
            case 2,        p.synthesis_bv_distribution = 'uniform';
            case 3,        p.synthesis_bv_distribution = 'gaussian';
            case 4,        p.synthesis_bv_distribution = 'gamma';
        end
        p.sbv_par1 = str2num(get(S.sbv_par1,'String'));
        p.sbv_par2 = str2num(get(S.sbv_par2,'String'));
        % Degradation biological variance
        p.degradation_bv_distribution = get(S.degradation_bv_distribution,'Value');
        switch p.degradation_bv_distribution
            case 1,        p.degradation_bv_distribution = 'constant';
            case 2,        p.degradation_bv_distribution = 'uniform';
            case 3,        p.degradation_bv_distribution = 'gaussian';
            case 4,        p.degradation_bv_distribution = 'gamma';
        end
        p.dbv_par1 = str2num(get(S.dbv_par1,'String'));
        p.dbv_par2 = str2num(get(S.dbv_par2,'String'));
        % Measurement noise
        p.measurement_noise_distribution = get(S.measurement_noise_distribution,'Value');
        switch p.measurement_noise_distribution
            case 1,        p.measurement_noise_distribution = 'constant';
            case 2,        p.measurement_noise_distribution = 'uniform';
            case 3,        p.measurement_noise_distribution = 'gaussian';
            case 4,        p.measurement_noise_distribution = 'gamma';
        end
        p.mn_par1 = str2num(get(S.mn_par1,'String'));
        p.mn_par2 = str2num(get(S.mn_par2,'String'));
        
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        
        % Genotype
        p.genotype = get(S.genotype,'Value');
        switch p.genotype
            case 1,        p.genotype = 'generate';
            case 2,        p.genotype = 'load_m-map';
            case 3,        p.genotype = 'load_mg-map';
        end
        % Gene positions
        p.gene_positions = get(S.gene_positions,'Value');
        switch p.gene_positions
            case 1,        p.gene_positions = 'at_markers';
            case 2,        p.gene_positions = 'unif_distr';
        end
        % RILs type
        p.RILs = get(S.RILs_type,'Value');
        switch p.RILs
            case 1,        p.RILs = 'selfing';
            case 2,        p.RILs = 'sibling';
        end
        % Mapping function
        p.mapping = get(S.mapping,'Value');
        switch p.mapping
            case 1,        p.mapping = 'haldane';
            case 2,        p.mapping = 'kosambi';
        end
        % Number of chromosomes
        p.chromosomes = str2num(get(S.chromosomes,'String'));
        % Number of markers per chromosome
        p.markers_per_chromosome_mean = str2num(get(S.markers_per_chromosome_mean,'String'));
        p.markers_per_chromosome_std = str2num(get(S.markers_per_chromosome_std,'String'));
        % Distances (cM)
        p.distance_mean = str2num(get(S.distance_mean,'String'));
        p.distance_std = str2num(get(S.distance_std,'String'));
        % Cis-effect probability
        p.cis_effect_probability = str2num(get(S.cis_effect_probability,'String'));
        % Genotype error rate
        p.genotype_error_rate = str2num(get(S.genotype_error_rate,'String'));
        % Z lower bound
        p.Zl = str2num(get(S.Zl,'String'));
        % Z upper bound
        p.Zu = str2num(get(S.Zu,'String'));
        % Customized genetic map
        p.genetic_map = get(S.genetic_map,'String');
        % Population size
        p.m_sg = str2double(get(S.m_sg,'String'));
        
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        
        % Print edge list
        p.edge_list = get(S.edge_list,'Value');
        % Print signed edge list
        p.pajek_network_file = get(S.pajek_network_file,'Value');
        % Print module list
        p.module_list = get(S.module_list,'Value');
        % Print topological properties
        p.topological_properties = get(S.topological_properties,'Value');
        % Print genotype list
        p.genotype_information = get(S.genotype_information,'Value');
        % Print genotype matrix
        p.genotype_matrix = get(S.genotype_matrix,'Value');
        % Print gene expression matrix
        p.gene_expression_matrix = get(S.gene_expression_matrix,'Value');
        % Print phenotype matrix
        p.phenotype_matrix = get(S.phenotype_matrix,'Value');
        % Print genetic map
        p.print_genetic_map = get(S.print_genetic_map,'Value');
        % Print perturbation list
        p.perturbation_list = get(S.perturbation_list,'Value');
        % Print simulation settings
        p.simulation_summary = get(S.simulation_summary,'Value');
        % Display degree distribution
        p.node_degree_distributions = get(S.node_degree_distributions,'Value');
        % Display distribution of parameters
        p.parameter_distributions = get(S.parameter_distributions,'Value');
        % Display heritability distribution
        p.heritability_distribution = get(S.heritability_distribution,'Value');
        % Display gene expression distribution
        p.gene_expression_distribution = get(S.gene_expression_distribution,'Value');
        % Display X-Y correlation distributions
        p.correlation_distributions = get(S.correlation_distributions,'Value');
        
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        
        % Date string in the format "yyyymmdd_hhmmss"
        p.date_str = date_string();
        
        % Save the random number default stream and the internal state of its generator.
        % Use getDefaultStream if using a pre-2011 version of MATLAB
        if verLessThan('matlab', '7.12')
            p.RandStream = RandStream.getDefaultStream;
        else
        % Use getGlobalStream if using a post-2010 version of MATLAB
            p.RandStream = RandStream.getGlobalStream;
        end
        p.RandStream_State = get(p.RandStream,'State');
        
        % Set directory to save the output files
        p.output_dir = 'output';
        
        % Run SysGenSIM
        sysgensim(p);
    end
end
